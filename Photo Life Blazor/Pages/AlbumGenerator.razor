@page "/album/{user}"
@inject NavigationManager NavigationManager
@using System.Collections.Generic
@using metadata_extractor.Models

<PageTitle>PhotoLife: Album Generator</PageTitle>

@* Title and Description *@
<div class="text-center" id="no-scroll-bar">
    @* Loading PopUp for when the album is being generated *@
    @if (isLoading)
    {
        <div class="modal">
            <div class="modal-content">
                <div class="spinner"></div>
                <p>Filtering your albums (responsibly)...</p>
            </div>
        </div>
    }
    <div class="text-center my-2" style="margin: 0 4em">
        <h1>Album Generator</h1>
        <h5>Please choose at least one of the options below to filter your photos by.
            Be advised that too many filters can restrict how many (if any) photos can be categorized into the resulting album(s).</h5>
    </div>

    @* Filter Buttons & Corresponding Filter Options *@
    @* LEFT SIDE FRAME *@
    <div style="display: flex; margin: 0 10em;">
        <div style="flex: 1; text-align: left;">
            <div style="margin: .6em 0">
                <label><h4>Flash:</h4></label>
                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(0)">@GetButtonText(0)</button>
                <div>
                    @if (options[0].SelectedOption)
                    {
                        <div>
                            <label><h6>Flash Option:</h6></label>
                            <select @bind="options[0].SelectedFilterString[0]">
                                <option value="ON">Flash On</option>
                                <option value="OFF">Flash Off</option>
                            </select>
                        </div>
                    }
                </div>
            </div>
            <div style="margin: .6em 0">
                <label><h4>Location (By Coordinates):</h4></label>
                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(1)">@GetButtonText(1)</button>
                <div>
                    @if (options[1].SelectedOption)
                    {
                        <div>
                            <label><h6>Latitude:</h6></label>
                            <input @bind="options[1].SelectedFilterDouble[0]" />
                        </div>
                        <div>
                            <label><h6>Longitude:</h6></label>
                            <input @bind="options[1].SelectedFilterDouble[1]" />
                        </div>
                        <div>
                            <label><h6>Distance:</h6></label>
                            <input @bind="options[1].SelectedFilterDouble[2]" />
                        </div>
                    }
                </div>
            </div>
            <div>
            <div style="margin: .6em 0">
                <label><h4>Time Of Day:</h4></label>
                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(2)">@GetButtonText(2)</button>
                <div>
                    @if (options[2].SelectedOption)
                    {
                        <div>
                            <div>
                                <label><h6>Starting Date Time:</h6></label>
                                <input type="datetime" @bind="options[2].SelectedFilterDateTime[0]"/>
                            </div>
                            <div>
                                <label><h6>Ending Date Time:</h6></label>
                                <input type="datetime" @bind="options[2].SelectedFilterDateTime[1]" />
                            </div>
                        </div>
                    }
            </div>
            </div>
                <label><h4>Model:</h4></label>
                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(3)">@GetButtonText(3)</button>
                <div>
                    @if (options[3].SelectedOption)
                    {
                        <div>
                            <label><h6>Model:</h6></label>
                            <input @bind="options[3].SelectedFilterString[0]" />
                        </div>
                    }
                </div>
            </div>
            <div style="margin: .6em 0">
		            <label><h4>Orientation:</h4></label>
		            <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(4)">@GetButtonText(4)</button>
		            <div>
			            @if (options[4].SelectedOption)
			            {
				            <div>
					            <label><h6>Orientation:</h6></label>
                                <select @bind="options[4].SelectedFilterString[0]">
                                    <option value="Portrait">Portrait</option>
                                    <option value="Landscape">Landscape</option>
                                </select>
				            </div>
			            }
		            </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Exposure Time:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(5)">@GetButtonText(5)</button>
		                <div>
			                @if (options[5].SelectedOption)
			                {
				                <div>
					                <label><h6>Exposure Time:</h6></label>
					                <input @bind="options[5].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Shutter Speed Value:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(6)">@GetButtonText(6)</button>
		                <div>
			                @if (options[6].SelectedOption)
			                {
				                <div>
					                <label><h6>Shutter Speed Value:</h6></label>
					                <input @bind="options[6].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Brightness Value:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(7)">@GetButtonText(7)</button>
		                <div>
			                @if (options[7].SelectedOption)
			                {
				                <div>
					                <label><h6>Brightness Value:</h6></label>
					                <input @bind="options[7].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Scene Type:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(8)">@GetButtonText(8)</button>
		                <div>
			                @if (options[8].SelectedOption)
			                {
				                <div>
					                <label><h6>Scene Type:</h6></label>
                                    <select @bind="options[8].SelectedFilterString[0]" >
                                        <option value="Portrait">Portrait</option>
                                        <option value="Landscape">Landscape</option>
                                    </select>
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Exposure Mode:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(9)">@GetButtonText(9)</button>
		                <div>
			                @if (options[9].SelectedOption)
			                {
				                <div>
					                <label><h6>Exposure Mode:</h6></label>
                                    <select @bind="options[9].SelectedFilterString[0]">
                                        <option value="Auto">Auto</option>
                                        <option value="Low">Low</option>
                                        <option value="High">High</option>
                                    </select>
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Lens Model:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(10)">@GetButtonText(10)</button>
		                <div>
			                @if (options[10].SelectedOption)
			                {
				                <div>
					                <label><h6>Lens Model:</h6></label>
					                <input @bind="options[10].SelectedFilterString[0]" />
				                </div>
			                }
		                </div>
            </div>
        </div>

    @* RIGHT SIDE FRAME *@
        <div style="flex: 1; text-align: left;">
            <div style="margin: .6em 0">
		                <label><h4>File Type:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(11)">@GetButtonText(11)</button>
		                <div>
			                @if (options[11].SelectedOption)
			                {
				                <div>
					                <label><h6>File Type:</h6></label>
                                    <select @bind="options[11].SelectedFilterString[0]">
                                        <option value="JPG">.JPG</option>
                                        <option value="HEIC">.HEIC</option>
                                        <option value="PNG">.PNG</option>
                                    </select>
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>File Name:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(12)">@GetButtonText(12)</button>
		                <div>
			                @if (options[12].SelectedOption)
			                {
				                <div>
					                <label><h6>File Name:</h6></label>
					                <input @bind="options[12].SelectedFilterString[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>File Size:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(13)">@GetButtonText(13)</button>
		                <div>
			                @if (options[13].SelectedOption)
			                {
				                <div>
					                <label><h6>File Size:</h6></label>
					                <input @bind="options[13].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>GPS Altitude:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(14)">@GetButtonText(14)</button>
		                <div>
			                @if (options[14].SelectedOption)
			                {
				                <div>
					                <label><h6>GPS Altitude:</h6></label>
					                <input @bind="options[14].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>GPS Img Direction:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(15)">@GetButtonText(15)</button>
		                <div>
			                @if (options[15].SelectedOption)
			                {
				                <div>
					                <label><h6>GPS Img Direction:</h6></label>
					                <input @bind="options[15].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>GPS Horizontal Position Error:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(16)">@GetButtonText(16)</button>
		                <div>
			                @if (options[16].SelectedOption)
			                {
				                <div>
					                <label><h6>GPS Horizontal Position Error:</h6></label>
					                <input @bind="options[16].SelectedFilterDouble[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Width:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(17)">@GetButtonText(17)</button>
		                <div>
			                @if (options[17].SelectedOption)
			                {
				                <div>
					                <label><h6>Width:</h6></label>
					                <input @bind="options[17].SelectedFilterInt[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Height:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(18)">@GetButtonText(18)</button>
		                <div>
			                @if (options[18].SelectedOption)
			                {
				                <div>
					                <label><h6>Height:</h6></label>
					                <input @bind="options[18].SelectedFilterInt[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>X Resolution:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(19)">@GetButtonText(19)</button>
		                <div>
			                @if (options[19].SelectedOption)
			                {
				                <div>
					                <label><h6>X Resolution:</h6></label>
					                <input @bind="options[19].SelectedFilterInt[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Y Resolution:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(20)">@GetButtonText(20)</button>
		                <div>
			                @if (options[20].SelectedOption)
			                {
				                <div>
					                <label><h6>Y Resolution:</h6></label>
					                <input @bind="options[20].SelectedFilterInt[0]" />
				                </div>
			                }
		                </div>
            </div>
            <div style="margin: .6em 0">
		                <label><h4>Software:</h4></label>
		                <button class="btn btn-default btn-main" @onclick="()=>ToggleOption(21)">@GetButtonText(21)</button>
		                <div>
			                @if (options[21].SelectedOption)
			                {
				                <div>
					                <label><h6>Software:</h6></label>
                                    <select @bind="options[21].SelectedFilterString[0]" >
                                        <option value="Photoshop">Photoshop</option>
                                    </select>
				                </div>
			                }
		                </div>
            </div>
            </div>
    </div>

    @* Submit Button to Send Data to API *@
    @* <div class="p-lg-4">
        <button class="btn btn-default btn-main" @onclick="Success"><h4>Generate</h4></button>
    </div> *@

    <div style="">
        @* Error if no options chosen *@
        @if (noOptionChosen == true)
        {
            <p>You must choose at least one filter option to run the album generator algorithm.</p>
        }
    
        @* Success Messsage that shows after albums have been created *@
        @if (Done == true)
        {
            <div class="p-lg-4">
                <p>
                    <b>Success!</b> We have processed your photos with your @numOfFilters chosen filter(s). <br />
                    Please check your Drive for the new Album(s). <br />
                    If there are no albums, then that means we couldn't find photos with the filter(s) you selected.
                </p>
            </div>
        } else {
            @* Submit Button to Send Data to API *@
            <div class="p-lg-4">
                <button class="btn btn-default btn-main" @onclick="Success"><h4>Generate</h4></button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string user { get; set; }

    // keeps track of filters and the loading screen
    private Boolean noOptionChosen = false;
    private Boolean Done = false;
    private int numOfFilters = 0;
    private bool isLoading = false;

    private ResponseModel responseModel = new ResponseModel();

    public class FilterOption
    {
        public string Filter { get; set; }
        public bool SelectedOption { get; set; }
        public List<string> SelectedFilterString { get; set; }
        public List<int> SelectedFilterInt { get; set; }
        public List<double> SelectedFilterDouble { get; set; }
        public List<DateTime> SelectedFilterDateTime { get; set; }

    }
    static DateTime basic = new DateTime(2024, 01, 01, 00, 00, 00);

    private List<FilterOption> options = new List<FilterOption>
    {
        new FilterOption { Filter = "Flash", SelectedOption = false, SelectedFilterString = new List<string> { "ON" } },
        new FilterOption { Filter = "Location", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0, 0.0 } }, //distance in what? ft, in?
        new FilterOption { Filter = "Time Of Day", SelectedOption = false, SelectedFilterDateTime = new List<DateTime> {basic, basic} }, //real datetime insert so it is formatted?
        new FilterOption { Filter = "Model", SelectedOption = false, SelectedFilterString = new List<string> { "iPhone 11" } },
        new FilterOption { Filter = "Orientation", SelectedOption = false, SelectedFilterString = new List<string> { "Portrait" } },
        new FilterOption { Filter = "Exposure Time", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "Shutter Speed Value", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "Brightness Value", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "Scene Type", SelectedOption = false, SelectedFilterString = new List<string> { "Portrait" } }, //redundant to orientation?!
        new FilterOption { Filter = "Exposure Mode", SelectedOption = false, SelectedFilterString = new List<string> { "Auto" } },
        new FilterOption { Filter = "Lens Model", SelectedOption = false, SelectedFilterString = new List<string> { "iPhone 11" } },
        new FilterOption { Filter = "File Type", SelectedOption = false, SelectedFilterString = new List<string> { "JPEG" } },
        new FilterOption { Filter = "File Name", SelectedOption = false, SelectedFilterString = new List<string> { "IMG_0001" } },
        new FilterOption { Filter = "File Size", SelectedOption = false, SelectedFilterDouble = new List<double> { 0, 0 } },
        new FilterOption { Filter = "GPS Altitude", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "GPS Img Direction", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "GPS Horizontal Positioning Error", SelectedOption = false, SelectedFilterDouble = new List<double> { 0.0, 0.0 } },
        new FilterOption { Filter = "Width", SelectedOption = false, SelectedFilterInt = new List<int> { 0, 0 } },
        new FilterOption { Filter = "Height", SelectedOption = false, SelectedFilterInt = new List<int> { 0, 0 } },
        new FilterOption { Filter = "X Resolution", SelectedOption = false, SelectedFilterInt = new List<int> { 0, 0 } },
        new FilterOption { Filter = "Y Resolution", SelectedOption = false, SelectedFilterInt = new List<int> { 0, 0 } },
        new FilterOption { Filter = "Software", SelectedOption = false, SelectedFilterString = new List<string> { "Photoshop" } }
    };

    private void ToggleOption(int index)
    {
        noOptionChosen = false;
        options[index].SelectedOption = !options[index].SelectedOption;
    }

    private string GetButtonText(int index)
    {
        return options[index].SelectedOption ? "YES" : "NO";
    }

    private void GetNumFilter()
    {
        foreach (var planB in options)
        {
            if (planB.SelectedOption)
            {
                numOfFilters++;
            }
        }
    }

    /*new FilterOption
    {
        Filter = "Software",
        SelectedOption
    }*/

    private void AllFilter()
    {
        foreach (var filter in options)
        {
            // For Flash
            if (filter.Filter == "Flash")
            {
                if (filter.SelectedOption)
                {
                    if (filter.SelectedFilterString[0] == "ON")
                    {
                        responseModel.inputIsFlash = true;

                    }
                    else
                    {
                        responseModel.inputIsFlash = false;
                    }
                }
            }

            // For Location
            if (filter.Filter == "Location")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputCoord = filter.SelectedFilterDouble.ToArray();
                }
            }

            // For Time Of Day
            if (filter.Filter == "Time Of Day")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputTimeRange = filter.SelectedFilterDateTime.ToArray();
                }
            }

            // For Model
            if (filter.Filter == "Model")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputLensModel = filter.SelectedFilterString.ToString();
                }
            }

            // For Orientation
            if (filter.Filter == "Orientation")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputOrientation = filter.SelectedFilterString.ToString();
                }
            }

            // For Exposure Time
            if (filter.Filter == "Exposure Time")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputExposureTime = filter.SelectedFilterDouble.ToList();

                }
            }

            // For Shutter Speed Value
            if (filter.Filter == "Shutter Speed Value")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputShutterSpeedValue = filter.SelectedFilterDouble.ToArray();
                }
            }

            // For Brightness Value
            if (filter.Filter == "Brightness Value")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputBrightnessValue = filter.SelectedFilterDouble.ToArray();
                }
            }
            // For Scene Type
            if (filter.Filter == "Scene Type")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputSceneType = filter.SelectedFilterString.ToString();
                }
            }
            // For Exposure Mode
            if (filter.Filter == "Exposure Mode")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputExposureMode = filter.SelectedFilterString.ToString();
                }
            }
            // For Lens Model
            if (filter.Filter == "Lens Model")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputLensModel = filter.SelectedFilterString.ToString();
                }
            }
            // For File Type
            if (filter.Filter == "File Type")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputFileType = filter.SelectedFilterString.ToString();
                }
            }
            // For File Name
            if (filter.Filter == "File Name")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputFileName = filter.SelectedFilterString.ToString();
                }
            }
            // For File Size
            if (filter.Filter == "File Size")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputFileSize = filter.SelectedFilterDouble.ToArray();
                }
            }
            // For GPS Altitude
            if (filter.Filter == "GPS Altitude")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputGPSAltitude = filter.SelectedFilterDouble.ToArray();
                }
            }
            // For GPS Img Direction
            if (filter.Filter == "GPS Img Direction")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputGPSImgDirection = filter.SelectedFilterDouble.ToArray();
                }
            }
            // For GPS Horizontal Positioning Error
            if (filter.Filter == "GPS Horizontal Positioning Error")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputGPSHorizontalPositioningError = filter.SelectedFilterDouble.ToArray();
                }
            }
            // For Width
            if (filter.Filter == "Width")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputWidth = filter.SelectedFilterInt.ToArray();
                }
            }
            // For Height
            if (filter.Filter == "Height")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputHeight = filter.SelectedFilterInt.ToArray();
                }
            }
            // For X Resolution
            if (filter.Filter == "X Resolution")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputXRes = filter.SelectedFilterInt.ToArray();
                }
            }
            // For Y Resolution
            if (filter.Filter == "Y Resolution")
            {
                if (filter.SelectedOption)
                {
                    //responseModel.inputYRes = filter.SelectedFilterInt.ToArray();
                }
            }
            // For Software
            if (filter.Filter == "Software")
            {
                if (filter.SelectedOption)
                {
                    responseModel.inputSoftware = filter.SelectedFilterString.ToString();
                }
            }
        }
    }

    // Handles the filter submission
    async private Task Success()
    {
        GetNumFilter();
        if (numOfFilters == 0)
        {
            noOptionChosen = true;
        } else
        {
            // Turn Loading Screen On
            noOptionChosen = false;
            isLoading = true;
            StateHasChanged();
            await Task.Delay(3333);

            // Call the Album Generator API and wait for respone.
            //await AlbumGenerator.Sum();
            //curl -X POST

            // Turn Loading Screen Off and notify user to check their drive
            isLoading = false;
            StateHasChanged();
            Done = true;
        }
    }
}